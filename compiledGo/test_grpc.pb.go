// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: test.proto

package compiledGo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomeRequestClient is the client API for RandomeRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomeRequestClient interface {
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
	PrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (RandomeRequest_PrimeNumberClient, error)
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (RandomeRequest_ComputeAverageClient, error)
	FindMaxNumber(ctx context.Context, opts ...grpc.CallOption) (RandomeRequest_FindMaxNumberClient, error)
}

type randomeRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomeRequestClient(cc grpc.ClientConnInterface) RandomeRequestClient {
	return &randomeRequestClient{cc}
}

func (c *randomeRequestClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/RandomeRequest/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomeRequestClient) PrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (RandomeRequest_PrimeNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomeRequest_ServiceDesc.Streams[0], "/RandomeRequest/PrimeNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomeRequestPrimeNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomeRequest_PrimeNumberClient interface {
	Recv() (*PrimeNumberResponse, error)
	grpc.ClientStream
}

type randomeRequestPrimeNumberClient struct {
	grpc.ClientStream
}

func (x *randomeRequestPrimeNumberClient) Recv() (*PrimeNumberResponse, error) {
	m := new(PrimeNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *randomeRequestClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (RandomeRequest_ComputeAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomeRequest_ServiceDesc.Streams[1], "/RandomeRequest/ComputeAverage", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomeRequestComputeAverageClient{stream}
	return x, nil
}

type RandomeRequest_ComputeAverageClient interface {
	Send(*ComputeAverageRequest) error
	CloseAndRecv() (*ComputeAverageResponse, error)
	grpc.ClientStream
}

type randomeRequestComputeAverageClient struct {
	grpc.ClientStream
}

func (x *randomeRequestComputeAverageClient) Send(m *ComputeAverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *randomeRequestComputeAverageClient) CloseAndRecv() (*ComputeAverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ComputeAverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *randomeRequestClient) FindMaxNumber(ctx context.Context, opts ...grpc.CallOption) (RandomeRequest_FindMaxNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomeRequest_ServiceDesc.Streams[2], "/RandomeRequest/FindMaxNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomeRequestFindMaxNumberClient{stream}
	return x, nil
}

type RandomeRequest_FindMaxNumberClient interface {
	Send(*FindMaxRequest) error
	Recv() (*FindMaxResponse, error)
	grpc.ClientStream
}

type randomeRequestFindMaxNumberClient struct {
	grpc.ClientStream
}

func (x *randomeRequestFindMaxNumberClient) Send(m *FindMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *randomeRequestFindMaxNumberClient) Recv() (*FindMaxResponse, error) {
	m := new(FindMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomeRequestServer is the server API for RandomeRequest service.
// All implementations must embed UnimplementedRandomeRequestServer
// for forward compatibility
type RandomeRequestServer interface {
	Sum(context.Context, *SumRequest) (*SumResponse, error)
	PrimeNumber(*PrimeNumberRequest, RandomeRequest_PrimeNumberServer) error
	ComputeAverage(RandomeRequest_ComputeAverageServer) error
	FindMaxNumber(RandomeRequest_FindMaxNumberServer) error
}

// UnimplementedRandomeRequestServer must be embedded to have forward compatible implementations.
type UnimplementedRandomeRequestServer struct {
}

func (UnimplementedRandomeRequestServer) Sum(context.Context, *SumRequest) (*SumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedRandomeRequestServer) PrimeNumber(*PrimeNumberRequest, RandomeRequest_PrimeNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method PrimeNumber not implemented")
}
func (UnimplementedRandomeRequestServer) ComputeAverage(RandomeRequest_ComputeAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (UnimplementedRandomeRequestServer) FindMaxNumber(RandomeRequest_FindMaxNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method FindMaxNumber not implemented")
}
func (UnimplementedRandomeRequestServer) mustEmbedUnimplementedRandomeRequestServer() {}

// UnsafeRandomeRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomeRequestServer will
// result in compilation errors.
type UnsafeRandomeRequestServer interface {
	mustEmbedUnimplementedRandomeRequestServer()
}

func RegisterRandomeRequestServer(s grpc.ServiceRegistrar, srv RandomeRequestServer) {
	s.RegisterService(&RandomeRequest_ServiceDesc, srv)
}

func _RandomeRequest_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomeRequestServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RandomeRequest/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomeRequestServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RandomeRequest_PrimeNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomeRequestServer).PrimeNumber(m, &randomeRequestPrimeNumberServer{stream})
}

type RandomeRequest_PrimeNumberServer interface {
	Send(*PrimeNumberResponse) error
	grpc.ServerStream
}

type randomeRequestPrimeNumberServer struct {
	grpc.ServerStream
}

func (x *randomeRequestPrimeNumberServer) Send(m *PrimeNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RandomeRequest_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RandomeRequestServer).ComputeAverage(&randomeRequestComputeAverageServer{stream})
}

type RandomeRequest_ComputeAverageServer interface {
	SendAndClose(*ComputeAverageResponse) error
	Recv() (*ComputeAverageRequest, error)
	grpc.ServerStream
}

type randomeRequestComputeAverageServer struct {
	grpc.ServerStream
}

func (x *randomeRequestComputeAverageServer) SendAndClose(m *ComputeAverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *randomeRequestComputeAverageServer) Recv() (*ComputeAverageRequest, error) {
	m := new(ComputeAverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RandomeRequest_FindMaxNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RandomeRequestServer).FindMaxNumber(&randomeRequestFindMaxNumberServer{stream})
}

type RandomeRequest_FindMaxNumberServer interface {
	Send(*FindMaxResponse) error
	Recv() (*FindMaxRequest, error)
	grpc.ServerStream
}

type randomeRequestFindMaxNumberServer struct {
	grpc.ServerStream
}

func (x *randomeRequestFindMaxNumberServer) Send(m *FindMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *randomeRequestFindMaxNumberServer) Recv() (*FindMaxRequest, error) {
	m := new(FindMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomeRequest_ServiceDesc is the grpc.ServiceDesc for RandomeRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomeRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RandomeRequest",
	HandlerType: (*RandomeRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _RandomeRequest_Sum_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PrimeNumber",
			Handler:       _RandomeRequest_PrimeNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAverage",
			Handler:       _RandomeRequest_ComputeAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaxNumber",
			Handler:       _RandomeRequest_FindMaxNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
